#!/bin/bash

secretKey=""
secretValue=""
dataFileLocation=""

getSecretName() {
  local secret=""
if [[ $1 == "myProject-schedules-service" ]]; then
      secret="SCHEDULE_SERVICE_PROP"
   elif [[ $1 == "myProject-core-service" ]]; then
      secret="CORE_SERVICE_PROP"
   elif [[ $1 == "myProject-schedules-processor" ]]; then
      secret="SCHEDULE_PROCESSOR_PROP"
   else
     echo "${RED} $service not a valid service ${NO_COLOR}"
     exit 1;
fi
echo $secret
}

die() {
   printf '%s\n' "$1" >&2
   exit 1
}

checkEmpty() {
   if [[ -z $1 ]]; then
      echo "try again with non empty value"
      exit 1;
   fi
}

checkFile() {
  if [ ! -f $1 ]; then
      echo "File($1): not found!, enter valid file path"
      exit 1;
  fi
}

checkSecretInputs() {
  while :; do
     case $1 in
         --secret-key)       # Takes an option argument; ensure it has been specified.
             if [ "$2" ]; then
               secretKey=$2
               shift
             else
                 die 'ERROR: "--service" requires a non-empty option argument.'
             fi
             ;;
         --secret-key=?*)
             secretKey=${1#*=}
             ;;
         --secret-key=)         # Handle the case of an empty --file=
             die 'ERROR: "--secret" requires a non-empty option argument.'
             ;;
         --data-file)
            if [ "$2" ]; then
               dataFileLocation=$2
               shift
            else
               die 'ERROR: "--data-file" requires a non-empty option argument.'
            fi
            ;;
         --data-file=?*)
             dataFileLocation=${1#*=} # Delete everything up to "=" and assign the remainder.
             ;;
         --data-file=)         # Handle the case of an empty --file=
             die 'ERROR: "--data-file" requires a non-empty option argument.'
             ;;
         --secret-value)
             if [ "$2" ]; then
                secretValue=$2
                shift
             else
                die 'ERROR: "--data-file" requires a non-empty option argument.'
             fi
             ;;
         --secret-value=?*)
             secretValue=${1#*=} # Delete everything up to "=" and assign the remainder.
             ;;
         --secret-value=)         # Handle the case of an empty --file=
             die 'ERROR: "--data-file" requires a non-empty option argument.'
             ;;
         --)              # End of all options.
             shift
             break
             ;;
         -?*)
             printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
             ;;
         *)               # Default case: No more options, so break out of the loop.
             break
     esac

     shift
  done

if [[ $secretKey == "" ]]; then
    echo "missing secret key"
    exit 1;
fi

if [[ $secretValue == "" ]] &&  [[ $dataFileLocation == "" ]]; then
  echo "missing --secret-value (or) --data-file"
  exit 1;
fi


}

